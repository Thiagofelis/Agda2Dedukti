(; Sorts ;)

Sort : Type.

set  : univ.Lvl -> Sort.
prop : univ.Lvl -> Sort.
setOmega : Sort.

(; Universe successors ;)
def axiom : Sort -> Sort.
[i] axiom (set i)  --> set (univ.s i).
[i] axiom (prop i) --> set (univ.s i).
[]  axiom setOmega --> setOmega.

(; Universe product rules ;)
def rule : Sort -> Sort -> Sort.
[i, j] rule (set i)  (set j)   --> set  (univ.max i j).
[i, j] rule (set i)  (prop j)  --> prop (univ.max i j).
[i, j] rule (prop i) (set j)   --> set  (univ.max i j).
[i, j] rule (prop i) (prop j)  --> prop (univ.max i j).
[]     rule _        setOmega  --> setOmega.
[]     rule setOmega  _        --> setOmega.


(; Types and terms ;)
U : (s : Sort) -> Type.
def El : (s : Sort) -> (a : U s) -> Type.

u : (s : Sort) -> U (axiom s).
[s] El _ (u s) --> U s.

prod : (s1 : Sort) -> (s2 : Sort) -> (A : U s1) -> (B : (El s1 A -> U s2)) -> U (rule s1 s2).
[a, b, A, B] El _ (prod a b A B) --> x : El a A -> El b (B x).

forall : (l : (univ.Lvl -> Sort)) -> (i : univ.Lvl -> U (l i)) -> U setOmega.
[l, t] El _ (forall l t) --> i : univ.Lvl -> El (l i) (t i).






